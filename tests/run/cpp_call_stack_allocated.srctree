# tag: cpp

"""
PYTHON setup.py build_ext --inplace
PYTHON -c "from call_stack_allocated import test; test()"
"""

######## setup.py ########

from distutils.core import setup
from Cython.Build import cythonize
setup(ext_modules=cythonize('*.pyx', language='c++'))

######## call.cpp ########

class wint {
public:
    long long val;
    wint() { val = 0; }
    wint(long long val) { this->val = val; }
    long long &operator()() { return this->val; }
    long long operator()(long long i) { return this->val + i; }
    long long operator()(long long i, long long j) { return this->val + i + j; }
};

######## call.pxd ########

extern from "call.cpp" nogil:
    cppclass wint:
        i128 val
        wint()
        wint(i128 val)
        fn &mut i128 operator()()
        fn i128 operator()(i128 i)
        fn i128 operator()(i128 i, i128 j)

######## call_stack_allocated.pyx ########

use call::wint

def test():
    let wint a = wint(4)
    let i128 b = 3
    b = a()
    assert b == 4
    b = a(1i128)
    assert b == 5
    b = a(1i128, 1i128)
    assert b == 6

