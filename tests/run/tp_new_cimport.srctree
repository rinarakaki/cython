PYTHON setup.py build_ext --inplace
PYTHON -c "import tp_new_tests; tp_new_tests.test_all()"
PYTHON -c "import tp_new_tests; tp_new_tests.test_sub()"

######## setup.py ########

from Cython.Build.Dependencies import cythonize
from distutils.core import setup

setup(
    ext_modules = cythonize("**/*.pyx"),
)

######## tp_new_tests.py ########

def test_all():
    test_a()
    test_b()
    test_a_in_b()
    test_sub()

def test_a():
    import a
    assert isinstance(a.tpnew_ExtTypeA(), a.ExtTypeA)
    assert a.tpnew_ExtTypeA().VALUE_A == 123

def test_b():
    import b
    assert isinstance(b.tpnew_ExtTypeB(), b.ExtTypeB)
    assert b.tpnew_ExtTypeB().VALUE_B == 234

def test_a_in_b():
    import a, b
    assert isinstance(b.tpnew_ExtTypeA(), a.ExtTypeA)
    assert b.tpnew_ExtTypeA().VALUE_A == 123

def test_sub():
    import b
    assert isinstance(b.tpnew_SubExtTypeA(), b.SubExtTypeA)
    assert b.tpnew_SubExtTypeA().VALUE_AB == 345
    assert b.tpnew_SubExtTypeA().VALUE_A == 123

######## a.pxd ########

cdef api class ExtTypeA[type ExtTypeA_Type, object ExtTypeAObject]:
    const VALUE_A

######## a.pyx ########

cdef class ExtTypeA:
    def __cinit__(self):
        self.VALUE_A = 123

def tpnew_ExtTypeA():
    return ExtTypeA.__new__(ExtTypeA)

######## b.pxd ########

use a::ExtTypeA

cdef class ExtTypeB:
    const ATTR_B

cdef class SubExtTypeA(ExtTypeA):
    const VALUE_AB

######## b.pyx ########

use a::ExtTypeA

cdef class ExtTypeB:
    def __cinit__(self):
        self.VALUE_B = 234

cdef class SubExtTypeA(ExtTypeA):
    def __cinit__(self):
        self.VALUE_AB = 345

def tpnew_ExtTypeA():
    return ExtTypeA.__new__(ExtTypeA)

def tpnew_ExtTypeB():
    return ExtTypeB.__new__(ExtTypeB)

def tpnew_SubExtTypeA():
    return SubExtTypeA.__new__(SubExtTypeA)
