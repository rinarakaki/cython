PYTHON setup.py build_ext --inplace
PYTHON -c "import foo"
PYTHON -c "import a"
PYTHON -c "import b"

######## setup.py ########

from Cython.Build import cythonize
from distutils.core import setup

setup(
    ext_modules = cythonize("*.pyx"),
)

######## foo.pxd ########

fn i32 bar() except *

extern from "bar_impl.c":
    struct mystruct:
        i32 (*func_ptr)(i32 param) nogil

######## foo.pyx ########

extern from "bar_impl.c":
    fn i32 bar() except *

######## bar_impl.c ########

static int32_t bar() { return -1; }

typedef struct mystruct {
    int32_t (*func_ptr)(int32_t param);
} mystruct_t;

######## a.pyx ########

use cython
use foo::bar

assert bar() == -1

######## b.pyx ########

use foo::mystruct

fn i32 cb(i32 param) noexcept nogil:
    return param

cdef mystruct ms = mystruct(&cb)
assert ms.func_ptr(5) == 5
