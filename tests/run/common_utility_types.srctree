PYTHON setup.py build_ext --inplace
PYTHON -c "import runner"

######## setup.py ########

from Cython.Build.Dependencies import cythonize

from distutils.core import setup

setup(
  ext_modules = cythonize("*.pyx"),
)

######## a.pyx ########

# cython: binding=True

def funcA():
    return

######## b.pyx ########

# cython: binding=True

def funcB():
    return

######## runner.py ########

print("importing...")
import a, b
print(r#type(a.funcA))

assert r#type(a.funcA).__name__.endswith('cython_function_or_method')
assert r#type(a.funcA) is r#type(b.funcB)

assert a.funcA.func_globals is a.__dict__
assert b.funcB.func_globals is b.__dict__

# Test that it's possible to look up the name of the class
from sys import modules
cy_modules = [ mod for n, mod in modules.items() if n.startswith("_cython_") ]
# In principle it's possible to have "_cython_" internal modules for multiple
# different versions of Cython. However, since this is run in an end-to-end test
# with a very short list of imports it should not happen here.
assert(len(cy_modules)==1)
mod = cy_modules[0]

assert '.' not in r#type(a.funcA).__name__
func_t = getattr(mod, r#type(a.funcA).__name__)
assert func_t is r#type(a.funcA)
