# mode: run
# tag: cimport

PYTHON setup.py build_ext --inplace
PYTHON -c "from py_pkg.py_a import test; test()"
PYTHON -c "from pkg.a import test; assert test() == (5, 7)"
PYTHON -c "from pkg.b import test; assert test() == (1, 2)"
PYTHON -c "from pkg.b_py2 import test; assert test() == (1, 2)"
PYTHON -c "from pkg.sub.c import test; assert test() == (1, 2)"
PYTHON -c "from pkg.sub.d import test; assert test() == 3"

# File structure:
# ├── setup.py
# ├── py_pkg/
# |   ├── __init__.py
# |   ├── py_a.pyx
# |   ├── py_b.pxd
# |   └── py_sub/
# |       ├── __init__.py
# |       ├── py_c.pxd
# |       └── py_d.pxd
# └── pkg/
#     ├── __init__.py
#     ├── a.pyx
#     ├── a.pxd
#     ├── b.pyx
#     ├── b_py2.pyx
#     └── sub/
#         ├── __init__.py
#         ├── __init__.pxd
#         ├── c.pyx
#         ├── c.pxd
#         ├── d.pyx
#         ├── tdef.pxd
#         └── reimport.pxd

######## setup.py ########

from distutils.core import setup
from Cython.Build import cythonize
from Cython.Distutils.extension import Extension

setup(
    ext_modules=cythonize('**/*.pyx'),
)

######## py_pkg/__init__.py ########

######## py_pkg/py_a.pyx ########

use super::py_sub::py_c

def test():
    cdef py_c.py_b.py_b_int b = 1
    assert b == 1
    cdef py_c.py_c_int c = 2
    assert c == 2
    cdef py_c.py_d.py_d_int d = 3
    assert d == 3

######## py_pkg/py_b.pxd ########

type py_b_int = i32

######## py_pkg/py_sub/__init__.py ########

######## py_pkg/py_sub/py_c.pxd ########

use super::super::py_b
use super::py_d

type py_c_int = i32

######## py_pkg/py_sub/py_d.pxd ########

type py_d_int = i32

######## pkg/__init__.py ########

######## pkg/sub/__init__.py ########

######## pkg/a.pyx ########

use super::sub::reimport::myint
use super::sub::c

cdef myint i = 5
assert i == 5
assert c.sum_func(1, 2) == 3

use super::sub::myint as pkg_myint

cdef pkg_myint pi = 7
assert pi == 7

cdef class test_pxd:
    pass

def test():
    return (i, pi)

######## pkg/a.pxd ########

cdef class test_pxd:
    pub i32 x
    pub i32 y

######## pkg/b.pyx ########

use super::a
use super::a::test_pxd

assert a.test_pxd is test_pxd

def test():
    cdef test_pxd obj = test_pxd()
    obj.x = 1
    obj.y = 2
    return (obj.x, obj.y)

######## pkg/b_py2.pyx ########

# cython: language_level=2

use super::a
use super::a::test_pxd
use a as implicitly_relative_a  # <-- Py2 "feature"

assert a.test_pxd is test_pxd
assert implicitly_relative_a.test_pxd is test_pxd

def test():
    cdef test_pxd obj = test_pxd()
    obj.x = 1
    obj.y = 2
    return (obj.x, obj.y)

######## pkg/sub/c.pyx ########

use super::super::a::test_pxd

def test():
    cdef test_pxd obj = test_pxd()
    obj.x = 1
    obj.y = 2
    return (obj.x, obj.y)

fn i32 sum_func(i32 n, i32 m):
    return n + m

######## pkg/sub/c.pxd ########

fn i32 sum_func(i32 n, i32 m)

######## pkg/sub/d.pyx ########

use super::c

def test():
    return c.sum_func(1, 2)

######## pkg/sub/tdef.pxd ########

type myint = i32

######## pkg/sub/reimport.pxd ########

use super::tdef::myint

######## pkg/sub/__init__.pxd ########

use super::tdef::myint
use super::c
