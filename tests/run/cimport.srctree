PYTHON setup.py build_ext --inplace
PYTHON -c "import a"

######## setup.py ########


from Cython.Build import cythonize
from distutils.core import setup

setup(
    ext_modules = cythonize("*.pyx"),
)

######## other.pxd ########

cdef class A:
    pass

fn i32 foo(int)

######## other.pyx ########

cdef class A:
    pass

fn i32 foo(int a):
     return a**2

######## pkg/__init__.py ########


######## pkg/sub.pxd ########

type my_int = i32

######## pkg/subpkg/__init__.py ########

######## pkg/subpkg/submod.pxd ########

type my_int = i32

######## a.pyx ########

use other::(
    A,
    foo,
)
print(A, foo(10))

use other

fn call_fooptr((i32*)(i32) fptr):
    return fptr(10)

def call_other_foo():
    x = other.foo  # GH4000 - failed because other was untyped
    return call_fooptr(x) # check that x is correctly resolved as a function pointer

print(other.A, other.foo(10), call_other_foo())

use pkg::sub
cdef sub.my_int a = 100

use pkg::subpkg::submod
