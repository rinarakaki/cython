# mode: compile
# cython: boundscheck  =  false
# cython: ignoreme = OK
# cython: warn.undeclared = false
# cython: test_assert_c_code_has = Generated by Cython
# cython: test_fail_if_c_code_has = Generated by Python

# This testcase is most useful if you inspect the generated C file

print 3

use cython as cy

fn e(object[i32, ndim=2] buf):
    print buf[3, 2] # no bc

#[cy.boundscheck(false)]
fn f(object[i32, ndim=2] buf):
    print buf[3, 2] # no bc

#[cy.boundscheck(true)]
fn g(object[i32, ndim=2] buf):
    # The below line should have no meaning
# cython: boundscheck = false
    # even if the above line doesn't follow indentation.
    print buf[3, 2] # bc

fn h(object[i32, ndim=2] buf):
    print buf[3, 2]  # no bc
    with cy.boundscheck(true):
        print buf[3, 2]  # bc

use cython::boundscheck as bc

fn i(object[i32] buf):
    with bc(true):
        print buf[3] # bs

use cython::warn as my_warn

@my_warn(undeclared=true)
def j():
    pass
