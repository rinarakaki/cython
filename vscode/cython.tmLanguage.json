{
  "scopeName": "source.cython",
  "patterns": [
    { "include": "#comments" },
    { "include": "#constants" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#lvariables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "documentation comments",
          "name": "comment.line.documentation.cython",
          "match": "^\\s*\\. .*"
        },
        {
          "comment": "line comments",
          "name": "comment.line.double-slash.cython",
          "match": "\\s*# .*"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "ALL CAPS constants",
          "name": "constant.other.caps.cython",
          "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
        },
        {
          "comment": "constant declarations",
          "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.cython"
            },
            "2": {
              "name": "constant.other.caps.cython"
            }
          }
        },
        {
          "comment": "decimal integers and floats",
          "name": "constant.numeric.decimal.cython",
          "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "punctuation.separator.dot.decimal.cython"
            },
            "2": {
              "name": "keyword.operator.exponent.cython"
            },
            "3": {
              "name": "keyword.operator.exponent.sign.cython"
            },
            "4": {
              "name": "constant.numeric.decimal.exponent.mantissa.cython"
            },
            "5": {
              "name": "entity.name.type.numeric.cython"
            }
          }
        },
        {
          "comment": "hexadecimal integers",
          "name": "constant.numeric.hex.cython",
          "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.cython"
            }
          }
        },
        {
          "comment": "octal integers",
          "name": "constant.numeric.oct.cython",
          "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.cython"
            }
          }
        },
        {
          "comment": "binary integers",
          "name": "constant.numeric.bin.cython",
          "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.cython"
            }
          }
        },
        {
          "comment": "booleans",
          "name": "constant.language.bool.cython",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control flow keywords",
          "name": "keyword.control.cython",
          "match": "\\b(await|break|continue|do|else|for|if|loop|match|return|try|while|yield)\\b"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.cython storage.type.cython",
          "match": "\\b(extern|let|macro|mod|auto)\\b"
        },
        {
          "comment": "const keyword",
          "name": "storage.modifier.cython",
          "match": "\\b(const)\\b"
        },
        {
          "comment": "type keyword",
          "name": "keyword.declaration.type.cython storage.type.cython",
          "match": "\\b(type)\\b"
        },
        {
          "comment": "enum keyword",
          "name": "keyword.declaration.enum.cython storage.type.cython",
          "match": "\\b(enum)\\b"
        },
        {
          "comment": "trait keyword",
          "name": "keyword.declaration.trait.cython storage.type.cython",
          "match": "\\b(trait)\\b"
        },
        {
          "comment": "struct keyword",
          "name": "keyword.declaration.struct.cython storage.type.cython",
          "match": "\\b(struct)\\b"
        },
        {
          "comment": "storage modifiers",
          "name": "storage.modifier.cython",
          "match": "\\b(abstract|static)\\b"
        },
        {
          "comment": "other keywords",
          "name": "keyword.other.cython",
          "match": "\\b(as|async|become|box|dyn|move|final|gen|impl|in|override|priv|pub|ref|typeof|union|unsafe|unsized|use|from|virtual|where)\\b"
        },
        {
          "comment": "fn",
          "name": "keyword.other.fn.cython",
          "match": "\\bfn\\b"
        },
        {
          "comment": "crate",
          "name": "keyword.other.crate.cython",
          "match": "\\bcrate\\b"
        },
        {
          "comment": "mut",
          "name": "storage.modifier.mut.cython",
          "match": "\\bmut\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "numeric types",
          "match": "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.cython"
            }
          }
        }
      ]
    },
    "lvariables": {
      "patterns": [
        {
          "comment": "self",
          "name": "variable.language.self.cython",
          "match": "\\b[Ss]elf\\b"
        },
        {
          "comment": "super",
          "name": "variable.language.super.cython",
          "match": "\\bsuper\\b"
        }
      ]
    }
  }
}
